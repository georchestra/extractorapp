<html>
    <head>
        <script src="../../../../../../openlayers/lib/OpenLayers.js"></script>
        <script src="../../../../../../ext/adapter/ext/ext-base.js"></script>
        <script src="../../../../../../ext/ext-all-debug.js"></script>
        <script src="../../../../../lib/GeoExt.js"></script>
    
        <script>
        
        function test_constructor(t) {
            
            t.plan(2);
            
            var store = new GeoExt.data.LayerStore();
            
            var node = new GeoExt.tree.LayerNode({
                layer: "foo",
                layerStore: store,
                loader: {
                    param: "foo"
                }
            });
            
            t.ok(node.layerStore === store, "layerStore set");
            t.ok(node.attributes.loader instanceof GeoExt.tree.LayerParamLoader, "LayerParamLoader created from object.");
            
            node.destroy();
            
        }
        
        function test_render(t) {
            
            t.plan(6);
            
            var layer = new OpenLayers.Layer("foo");
            
            var mapPanel = new GeoExt.MapPanel({
                layers: [layer],
                allOverlays: true
            });
            
            var node = new GeoExt.tree.LayerNode({
                layer: "foo",
                checkedGroup: "check"
            });

           var panel = new Ext.tree.TreePanel({
                renderTo: "tree",
                root: node
            });
            
            mapPanel.on("render", function() {
                t.ok(node.layer === layer, "layer found on detected map panel");

                t.ok(node.ui.checkbox, "node has a checkbox");

                t.eq(node.ui.checkbox.type, "radio", "checkbox rendered as radio button when checkedGroup is configured");
                t.eq(node.ui.checkbox.name, "check_checkbox", "option group name set correctly according to checkedGroup");
                
                layer.setVisibility(false);
                t.eq(layer.visibility, true, "unchecking a layer with checkedGroup has no effect");
                
                delete node.attributes.checkedGroup;
                node.ui.toggleCheck();
                t.eq(layer.visibility, false, "unchecking a layer without checkedGroup hides the layer");
            });

            mapPanel.render("map");
            
            mapPanel.destroy();
        }
        
        function test_enforceOneVisible(t) {
            t.plan(8);

            var layers = [
                new OpenLayers.Layer("foo"),
                new OpenLayers.Layer("bar")
            ];
            var mapPanel = new GeoExt.MapPanel({
                layers: layers,
                allOverlays: true
            });
            var root = new GeoExt.tree.LayerContainer({
                loader: {
                    baseAttrs: {checkedGroup: "group"}
                },
                expanded: true
            });
            var panel = new Ext.tree.TreePanel({
                renderTo: "tree",
                root: root
            });
            mapPanel.render("map");

            // two overlay layers in the same checkedGroup: only one can be visible
            var nodes = panel.getRootNode().childNodes;
            t.eq(nodes[0].layer.getVisibility(), false, "Layer on top is hidden");
            t.eq(nodes[1].layer.getVisibility(), true, "Layer on bottom is visible");
            
            delete root.loader.baseAttrs.checkedGroup;
            mapPanel.map.allOverlays = false;
            
            // without a custom checkedGroup, base layers get the gx_baselayer group assigned
            mapPanel.layers.on("add", function(){
                t.eq(nodes[0].attributes.checkedGroup, "gx_baselayer", "gx_baselayer checkedGroup set for base layer");
            }, this, {single: true});
            mapPanel.map.addLayer(new OpenLayers.Layer("foo1", {isBaseLayer: true}));
                        
            root.loader.baseAttrs.checkedGroup = "another_group";
            
            // a custom checkedGroup will override the gx_baselayer default
            mapPanel.layers.on("add", function() {
                t.eq(nodes[0].attributes.checkedGroup, "another_group", "custom checkedGroup set for base layer");
            }, this, {single: true});
            mapPanel.map.addLayer(new OpenLayers.Layer("bar", {isBaseLayer: true}));
            
            // overlays also get the custom checkedGroup assigned
            mapPanel.layers.on("add", function() {
                t.eq(nodes[0].attributes.checkedGroup, "another_group", "custom checkedGroup set for overlay");
                // the another_group baselayer from above is invisible (the gx_baselayer one is visible)
                t.eq(nodes[0].layer.getVisibility(), true, "overlay in checkedGroup visible because no other layer in group is visible");
                // now making it visible
                nodes[1].layer.setVisibility(true);
                // and the overlay in the same checkedGroup gets hidden
                t.eq(nodes[0].layer.getVisibility(), false, "overlay in checkedGroup now hidden because base layer in group is visible");
            }, this, {single: true});
            mapPanel.map.addLayer(new OpenLayers.Layer("foo2", {isBaseLayer: false}));
            
            // remove all layers except one visible and one invisible layer
            mapPanel.map.removeLayer(nodes[0].layer);
            mapPanel.map.removeLayer(nodes[0].layer);
            mapPanel.map.removeLayer(nodes[0].layer);
            // now there is only one layer in the another_group
            // "bar" (invisible) is now in the group at position [0], "foo" (visible) at [1]
            mapPanel.layers.on("remove", function() {
                t.eq(nodes[0].layer.getVisibility(), true, "Previously invisible layer was made visible because the visible layer has been removed")
            }, this, {single: true});
            // removing "foo", so "bar" will have to be made visible
            mapPanel.map.removeLayer(nodes[1].layer);
            
            mapPanel.destroy();
        }

        function test_changelayername(t) {
            t.plan(3);

            var layer = new OpenLayers.Layer("test");

            var mapPanel = new GeoExt.MapPanel({
                layers: [layer],
                allOverlays: true
            });

            var node = new GeoExt.tree.LayerNode({
                layer: "test",
                layerStore: mapPanel.layers
            });

            var panel = new Ext.tree.TreePanel({
                root: node
            });
            panel.render(document.body);

            layer.setName("My new name");
            t.eq(node.text, "My new name", "Node is named 'My new name' after layer setName is called");
            
            layer.setName("Second Name");
            t.eq(node.text, "Second Name", "Layer name (title) can be set multiple times and the node respects it.");
            
            node = new GeoExt.tree.LayerNode({
                layer: "My new name",
                layerStore: mapPanel.layers,
                text: "My custom text"
            });
            
            layer.setName("test");
            t.eq(node.text, "My custom text", "Node text does not change with layer name if custom text was provided");

            node.destroy();
            mapPanel.destroy();
        }

        function test_ui_node_action(t) {
            t.plan(6);

            // setup

            var node = new GeoExt.tree.LayerNode({
                layer: new OpenLayers.Layer(),
                actions: [{
                    action: "foo-action",
                    qtip: "foo-qtip"
                }]
            });
            var tree  = new Ext.tree.TreePanel({
                renderTo: "tree",
                root: node
            });
            var ui = node.ui;
            var elNode = Ext.fly(ui.elNode);

            // test

            t.ok(elNode.first().hasClass(ui.actionsCls),
                 "the actions div is at correct location and " +
                 "has a correct class");
            t.ok(elNode.first().first() &&
                 elNode.first().first().hasClass(ui.actionCls) &&
                 elNode.first().first().hasClass("foo-action"),
                 "the action div is at correct location and " +
                 "has correct classes");

            // simulate click
            var log = [];
            node.on({
                action: function(n, a, e) {
                    log.push({n: n, a: a, e: e});
                }
            });
            var e = {
                getTarget: function(selector) {
                    if (selector == "." + ui.actionCls) {
                        return {
                            className: ui.actionCls + " foo-action"
                        };
                    }
                }
            };
            var oc = GeoExt.tree.LayerNodeUI.superclass.onClick;
            GeoExt.tree.LayerNodeUI.superclass.onClick = function() {};
            ui.onClick(e);
            t.eq(log.length, 1,
                 "click on action img triggers \"action\" event");
            t.ok(log[0].n == node,
                 "\"action\" listener given expected node");
            t.eq(log[0].a, "foo-action",
                 "\"action\" listener given expected action");
            t.ok(log[0].e == e,
                 "\"action\" listener given expected event");
            GeoExt.tree.LayerNodeUI.superclass.onClick = oc;

            // teardown

            tree.destroy();
        }

        function test_ui_node_ui_action(t) {
            t.plan(6);

            // setup

            var UI = Ext.extend(GeoExt.tree.LayerNodeUI, {
                actions: [{
                    action: "foo-action",
                    qtip: "foo-qtip"
                }]
            });

            var node = new GeoExt.tree.LayerNode({
                layer: new OpenLayers.Layer(),
                uiProvider: UI
            });
            var tree  = new Ext.tree.TreePanel({
                renderTo: "tree",
                root: node
            });
            var ui = node.ui;
            var elNode = Ext.fly(ui.elNode);

            // test

            t.ok(elNode.first().hasClass(ui.actionsCls),
                 "the actions div is at correct location and " +
                 "has a correct class");
            t.ok(elNode.first().first() &&
                 elNode.first().first().hasClass(ui.actionCls) &&
                 elNode.first().first().hasClass("foo-action"),
                 "the action div is at correct location and " +
                 "has correct classes");

            // simulate click
            var log = [];
            node.on({
                action: function(n, a, e) {
                    log.push({n: n, a: a, e: e});
                }
            });
            var e = {
                getTarget: function(selector) {
                    if (selector == "." + ui.actionCls) {
                        return {
                            className: ui.actionCls + " foo-action"
                        };
                    }
                }
            };
            var oc = GeoExt.tree.LayerNodeUI.superclass.onClick;
            GeoExt.tree.LayerNodeUI.superclass.onClick = function() {};
            ui.onClick(e);
            t.eq(log.length, 1,
                 "click on action img triggers \"action\" event");
            t.ok(log[0].n == node,
                 "\"action\" listener given expected node");
            t.eq(log[0].a, "foo-action",
                 "\"action\" listener given expected action");
            t.ok(log[0].e == e,
                 "\"action\" listener given expected event");
            GeoExt.tree.LayerNodeUI.superclass.onClick = oc;

            // teardown

            tree.destroy();
        }

        function test_ui_component_instance(t) {
            t.plan(4);

            // setup

            var component = new Ext.Panel({
                id: "foo-id",
                cls: "foo-cls",
                ctCls: "foo-ct-cls"
            });
            var node = new GeoExt.tree.LayerNode({
                layer: new OpenLayers.Layer(),
                component: component
            });
            var tree  = new Ext.tree.TreePanel({
                renderTo: "tree",
                root: node
            });
            var ui = node.ui;
            var elNode = Ext.fly(ui.elNode);

            // test
            t.ok(elNode.last().hasClass("foo-ct-cls"),
                 "the container div is at correct location and " +
                 "has a correct class");
            t.ok(elNode.last().child("#foo-id"),
                 "the container div contains the panel div");
            t.ok(elNode.last().child("#foo-id") &&
                 elNode.last().child("#foo-id").hasClass("foo-cls"),
                 "the panel div has a correct class");
            t.ok(node.component === component,
                 "the component is set in the node");

            // teardown

            tree.destroy();
        }

        function test_ui_component_config(t) {
            t.plan(3);

            // setup

            var component = {
                xtype: "panel",
                cls: "foo-cls",
                ctCls: "foo-ct-cls"
            };
            var node = new GeoExt.tree.LayerNode({
                layer: new OpenLayers.Layer(),
                component: component
            });
            var tree  = new Ext.tree.TreePanel({
                renderTo: "tree",
                root: node
            });
            var ui = node.ui;
            var elNode = Ext.fly(ui.elNode);

            // test
            t.ok(elNode.last().hasClass("foo-ct-cls"),
                 "the container div is at correct location and " +
                 "has a correct class");
            t.ok(elNode.last().child(".foo-cls") ,
                 "the container div contains the panel div, " +
                 "which has a correct class");
            t.ok(node.component instanceof Ext.Panel,
                 "the component is set in the node");

            // teardown

            tree.destroy();
        }

        function test_ui_component_function(t) {
            t.plan(16);

            // setup

            var component, node, tree, ui, elNode, log;

            // test

            // with a function returning a panel config
            log = [];
            component = function(n, e) {
                log.push({n: n, e: e});
                return {
                    xtype: "panel",
                    cls: "foo-cls",
                    ctCls: "foo-ct-cls"
                };
            };
            node = new GeoExt.tree.LayerNode({
                layer: new OpenLayers.Layer(),
                component: component
            });
            tree  = new Ext.tree.TreePanel({
                renderTo: "tree",
                root: node
            });
            ui = node.ui;
            elNode = Ext.fly(ui.elNode);
            t.eq(log.length, 1,
                 "[1] factory function called once");
            t.ok(log.length > 0 && log[0].n === node,
                 "[1] factory function called with node");
            t.ok(elNode.last().hasClass("foo-ct-cls"),
                 "[1] the container div is at correct location and " +
                 "has a correct class");
            t.ok(elNode.last().child(".foo-cls") ,
                 "[1] the container div contains the panel div, " +
                 "which has a correct class");
            t.ok(node.component instanceof Ext.Panel,
                 "[1] the component is set in the node");
            tree.destroy();

            // with a function returning a panel instance
            log = [];
            component = function(n, e) {
                log.push({n: n, e: e});
                return new Ext.Panel({
                    cls: "foo-cls",
                    ctCls: "foo-ct-cls"
                });
            };
            node = new GeoExt.tree.LayerNode({
                layer: new OpenLayers.Layer(),
                component: component
            });
            tree  = new Ext.tree.TreePanel({
                renderTo: "tree",
                root: node
            });
            ui = node.ui;
            elNode = Ext.fly(ui.elNode);
            t.eq(log.length, 1,
                 "[2] factory function called once");
            t.ok(log.length > 0 && log[0].n === node,
                 "[2] factory function called with node");
            t.ok(elNode.last().hasClass("foo-ct-cls"),
                 "[2] the container div is at correct location and " +
                 "has a correct class");
            t.ok(elNode.last().child(".foo-cls") ,
                 "[2] the container div contains the panel div, " +
                 "which has a correct class");
            t.ok(node.component instanceof Ext.Panel,
                 "[2] the component is set in the node");
            tree.destroy();

            // with an object with fn and scope properties
            log = [];
            var scope = {"some": "scope"};
            component = {
                fn: function(n, e) {
                    log.push({n: n, e: e, s: this});
                    return new Ext.Panel({
                        cls: "foo-cls",
                        ctCls: "foo-ct-cls"
                    });
                },
                scope: scope
            };
            node = new GeoExt.tree.LayerNode({
                layer: new OpenLayers.Layer(),
                component: component
            });
            tree  = new Ext.tree.TreePanel({
                renderTo: "tree",
                root: node
            });
            ui = node.ui;
            elNode = Ext.fly(ui.elNode);
            t.eq(log.length, 1,
                 "[3] factory function called once");
            t.ok(log.length > 0 && log[0].n === node,
                 "[3] factory function called with node");
            t.ok(log.length > 0 && log[0].s === scope,
                 "[3] factory function called with correct scope");
            t.ok(elNode.last().hasClass("foo-ct-cls"),
                 "[3] the container div is at correct location and " +
                 "has a correct class");
            t.ok(elNode.last().child(".foo-cls") ,
                 "[3] the container div contains the panel div, " +
                 "which has a correct class");
            t.ok(node.component instanceof Ext.Panel,
                 "[3] the component is set in the node");
            tree.destroy();

            // teardown
        }

        </script>
    </head>
    <body>
        <div id="map" style="width: 100px; height: 100px;"></div>
        <div id="tree" style="width: 100px; height: 100px;"></div>
    </body>
</html>
